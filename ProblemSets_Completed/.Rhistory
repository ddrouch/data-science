load("/Users/derekrouch/Documents/GitHub/data-science/pd_lab_explain.Rdata")
## Unconditional average
pd%>%summarize(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
##Unconditional average as a predictor
pd <- pd%>%mutate(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
pd <- pd%>%mutate(error_homeown=homeown_rate-mean_homeown_rate)
## Determine each variable's class
sapply(pd, class)
## Create a subset of the data, consisting of only numeric variables
pd_num_only <- subset(pd, select = -c(fips, county))
## Create a correlation matrix, rounded to two decimal places
cor_matrix <- cor(pd_num_only)
round(cor_matrix, 2)
## Remove every column except `homeown_rate` in the matrix
cor_homeown_rate <- subset(cor_matrix, select = c(homeown_rate))
View(cor_homeown_rate)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(Metrics)
## Load in the county-level data
load("/Users/derekrouch/Documents/GitHub/data-science/pd.Rdata")
pd%>%filter(county=="Los Angeles County, CA")%>%select(percapinc.2012)
## Full explanation of data in codebook
load("/Users/derekrouch/Documents/GitHub/data-science/pd_lab_explain.Rdata")
#or use View
View(lab_explain)
pd%>%filter(county=="Davidson County, TN")%>%
select(county,percapinc.2012)
pd%>%filter(coll_grad_pc>30)%>%
select(county,coll_grad_pc,percapinc.2012)%>%
arrange(-percapinc.2012)
## Create a rank variable for income
pd<-pd%>%mutate(percapinc_rank=rank(percapinc.2010))
## Plot by rank
gg<-ggplot(data=pd, aes(x=percapinc_rank,
y=percapinc.2010,
text=county))
## Add Points
gg<-gg+geom_point(alpha=.5,size=.5)
## Add labels
gg<-gg+xlab("Rank")+ylab("Per Capita Income, 2010")
gg
gg1<-gg
# Make Interactive plot
gg_p<-ggplotly(gg)
gg_p
##Unconditional Average
pd%>%summarize(mean_percapinc.2010=mean(percapinc.2010,na.rm=TRUE))
##Unconditional Average as a Predictor
pd<-pd%>%mutate(mean_percapinc.2010=mean(percapinc.2010,na.rm=TRUE))
##Plotting
gg<-ggplot(data=pd,aes(y=percapinc.2010,x=percapinc_rank,color="Actual"))
gg<-gg+geom_point(alpha=.5,size=.5)
gg<-gg+geom_point(aes(y=mean_percapinc.2010,x=percapinc_rank,
color="Predicted: Unconditional Mean"),
size=.5)
gg<-gg+xlab("Rank of Per Capita Income")+ylab("Per Capita Income")
gg<-gg+scale_color_manual(name="Type",
values=c("Actual"="black",
"Predicted: Unconditional Mean"="blue")
)
gg<-gg+theme(legend.position="bottom")
gg
##Save for later
gg2<-gg
pd<-pd%>%mutate(e1=percapinc.2010-mean_percapinc.2010)
## RMSE
rmse_uncond_mean<-rmse(pd$percapinc.2010,pd$mean_percapinc.2010)
rmse_uncond_mean
##Condtional Average across a single variable
## Create a variable for quartiles of college education
pd<-pd%>%mutate(coll_grad_level=ntile(coll_grad_pc,4))
pd%>%select(county,coll_grad_pc,coll_grad_level)%>%View()
table(pd$coll_grad_level)
##pd<-pd%>%mutate(coll_grad_level=ntile(coll_grad_pc,4))
pd<-pd%>%group_by(coll_grad_level)%>% ## Group by predictor
##Calculate mean at each level of predictor
mutate(pred_income_college=mean(percapinc.2010))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_income_college_rank=rank(pred_income_college,ties.method="random"))
pd%>%select(county,coll_grad_pc,coll_grad_level,pred_income_college)%>%View()
pd%>%group_by(coll_grad_level)%>% ## Group by predictor
##Calculate mean at each level of predictor
summarise(pred_income_college=mean(percapinc.2010))
gg<-ggplot(data=pd,aes(x=pred_income_college_rank,y=percapinc.2010,color="Actual"))
gg<-gg+geom_point(alpha=.5,size=.5)
gg<-gg+geom_point(aes(x=pred_income_college_rank,y=pred_income_college,color="Predicted:Conditional Mean, 1 var"))
gg<-gg+ scale_color_manual("Type",values=c("Predicted:Conditional Mean, 1 var"="red","Actual"="black"))
gg<-gg+theme(legend.position="bottom")
gg<-gg+xlab("Rank")+ylab("Per Capita Income, 2010")
gg
##Save for later
gg3<-gg
rmse_cond_mean_one<-rmse(pd$percapinc.2010,pd$pred_income_college)
rmse_cond_mean_one
## Create a variable for quartiles of college education
pd<-pd%>%mutate(homeown_rate_level=ntile(homeown_rate,4))
pd%>%group_by(homeown_rate_level)%>% ## Group by predictor
##Calculate mean at each level of predictor
summarise(pred_income_homeown_rate=mean(percapinc.2010))
pd<-pd%>%group_by(coll_grad_level,homeown_rate_level)%>% ## Group by predictor
##Calculate mean at each level of predictor
mutate(pred_income_coll_and_homeown=mean(percapinc.2010))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_income_coll_and_homeown_rank=rank(pred_income_coll_and_homeown,
ties.method="random"))
## Clear environment
rm(list=ls())
## Get libraries
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(Metrics)
## Load in the county-level data
load("/Users/derekrouch/Documents/GitHub/data-science/pd.Rdata")
## Load the variable descriptions
load("/Users/derekrouch/Documents/GitHub/data-science/pd_lab_explain.Rdata")
## Unconditional average
pd%>%summarize(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
##Unconditional average as a predictor
pd <- pd%>%mutate(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
pd <- pd%>%mutate(error_homeown=homeown_rate-mean_homeown_rate)
## Determine each variable's class
sapply(pd, class)
## Create a subset of the data, consisting of only numeric variables
pd_num_only <- subset(pd, select = -c(fips, county))
## Create a correlation matrix, rounded to two decimal places
cor_matrix <- cor(pd_num_only)
round(cor_matrix, 2)
## Remove every column except `homeown_rate` in the matrix
cor_homeown_rate <- subset(cor_matrix, select = c(homeown_rate))
## Create a variable for quartiles of % housing units in multi-unit structures
pd<-pd%>%mutate(house_unit_multi_level=ntile(house_unit_multi,4))
pd%>%select(county,house_unit_multi,house_unit_multi_level)%>%View()
table(pd$house_unit_multi_level)
pd%>%select(county,house_unit_multi,house_unit_multi_level)%>%View()
pd%>%select(county,house_unit_multi,house_unit_multi_level)%>%View()
##Group by predictor level
pd<-pd%>%group_by(coll_grad_level)%>% ## Group by predictor
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(pred_homeown_rate,ties.method="random"))
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>% ## Group by predictor
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(pred_homeown_rate,ties.method="random"))
pd%>%select(county,coll_grad_pc,coll_grad_level,pred_income_college)%>%View()
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>% ## Group by predictor
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(pred_homeown_rate,ties.method="random"))
pd%>%select(county,house_unit_multi,house_unit_multi_level,pred_homeown_rate)%>%View()
## Create a correlation matrix, rounded to two decimal places
cor_matrix <- cor(pd_num_only)
round(cor_matrix, 2)
## Remove every column except `homeown_rate` in the matrix
cor_homeown_rate <- subset(cor_matrix, select = c(homeown_rate))
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>%
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(pred_homeown_rate,ties.method="random"))
## View new
pd%>%select(county,house_unit_multi,house_unit_multi_level,pred_homeown_rate)%>%View()
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>%
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(pred_homeown_rate,ties.method="random"))
## View new pred_homeown_rate by coounty
pd%>%select(county,house_unit_multi,house_unit_multi_level,pred_homeown_rate)%>%View()
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(Metrics)
## Load in the county-level data
load("/Users/derekrouch/Documents/GitHub/data-science/pd.Rdata")
pd%>%filter(county=="Los Angeles County, CA")%>%select(percapinc.2012)
## Full explanation of data in codebook
load("/Users/derekrouch/Documents/GitHub/data-science/pd_lab_explain.Rdata")
#or use View
View(lab_explain)
pd%>%filter(county=="Davidson County, TN")%>%
select(county,percapinc.2012)
pd%>%filter(coll_grad_pc>30)%>%
select(county,coll_grad_pc,percapinc.2012)%>%
arrange(-percapinc.2012)
## Create a rank variable for income
pd<-pd%>%mutate(percapinc_rank=rank(percapinc.2010))
## Plot by rank
gg<-ggplot(data=pd, aes(x=percapinc_rank,
y=percapinc.2010,
text=county))
## Add Points
gg<-gg+geom_point(alpha=.5,size=.5)
## Add labels
gg<-gg+xlab("Rank")+ylab("Per Capita Income, 2010")
gg
gg1<-gg
# Make Interactive plot
gg_p<-ggplotly(gg)
gg_p
##Unconditional Average
pd%>%summarize(mean_percapinc.2010=mean(percapinc.2010,na.rm=TRUE))
##Unconditional Average as a Predictor
pd<-pd%>%mutate(mean_percapinc.2010=mean(percapinc.2010,na.rm=TRUE))
##Plotting
gg<-ggplot(data=pd,aes(y=percapinc.2010,x=percapinc_rank,color="Actual"))
gg<-gg+geom_point(alpha=.5,size=.5)
gg<-gg+geom_point(aes(y=mean_percapinc.2010,x=percapinc_rank,
color="Predicted: Unconditional Mean"),
size=.5)
gg<-gg+xlab("Rank of Per Capita Income")+ylab("Per Capita Income")
gg<-gg+scale_color_manual(name="Type",
values=c("Actual"="black",
"Predicted: Unconditional Mean"="blue")
)
gg<-gg+theme(legend.position="bottom")
gg
##Save for later
gg2<-gg
pd<-pd%>%mutate(e1=percapinc.2010-mean_percapinc.2010)
## RMSE
rmse_uncond_mean<-rmse(pd$percapinc.2010,pd$mean_percapinc.2010)
rmse_uncond_mean
##Condtional Average across a single variable
## Create a variable for quartiles of college education
pd<-pd%>%mutate(coll_grad_level=ntile(coll_grad_pc,4))
pd%>%select(county,coll_grad_pc,coll_grad_level)%>%View()
table(pd$coll_grad_level)
##pd<-pd%>%mutate(coll_grad_level=ntile(coll_grad_pc,4))
pd<-pd%>%group_by(coll_grad_level)%>% ## Group by predictor
##Calculate mean at each level of predictor
mutate(pred_income_college=mean(percapinc.2010))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_income_college_rank=rank(pred_income_college,ties.method="random"))
pd%>%select(county,coll_grad_pc,coll_grad_level,pred_income_college)%>%View()
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>%
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(pred_homeown_rate,ties.method="random"))
## Clear environment
rm(list=ls())
## Get libraries
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(Metrics)
## Load in the county-level data
load("/Users/derekrouch/Documents/GitHub/data-science/pd.Rdata")
## Load the variable descriptions
load("/Users/derekrouch/Documents/GitHub/data-science/pd_lab_explain.Rdata")
## Unconditional average
pd%>%summarize(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
##Unconditional average as a predictor
pd <- pd%>%mutate(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
pd <- pd%>%mutate(error_homeown=homeown_rate-mean_homeown_rate)
## Determine each variable's class
sapply(pd, class)
## Create a subset of the data, consisting of only numeric variables
pd_num_only <- subset(pd, select = -c(fips, county))
## Create a correlation matrix, rounded to two decimal places
cor_matrix <- cor(pd_num_only)
round(cor_matrix, 2)
## Remove every column except `homeown_rate` in the matrix
cor_homeown_rate <- subset(cor_matrix, select = c(homeown_rate))
## Create a variable for quartiles of % housing units in multi-unit structures
pd<-pd%>%mutate(house_unit_multi_level=ntile(house_unit_multi,4))
## Check for evenl distribution across levels
table(pd$house_unit_multi_level)
## View house_unit_multi_level for each county
pd%>%select(county,house_unit_multi,house_unit_multi_level)%>%View()
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>%
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(pred_homeown_rate,ties.method="random"))
## View new pred_homeown_rate by coounty
pd%>%select(county,house_unit_multi,house_unit_multi_level,pred_homeown_rate)%>%View()
View(lab_explain)
View(pd)
## View new pred_homeown_rate by county
pd%>%select(county,house_unit_multi,house_unit_multi_level,pred_homeown_rate, pred_homeown_rate_rank)%>%View()
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>%
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(-pred_homeown_rate,ties.method="random"))
## View new pred_homeown_rate by county
pd%>%select(county,house_unit_multi,house_unit_multi_level,pred_homeown_rate, pred_homeown_rate_rank)%>%View()
## Calculating the root mean squared error
rmse_uncond_mean <- rmse(pd$homeown_rate,pd$mean_homeown_rate)
## Calling the RMSE
rmse_uncond_mean
## Calculating the root mean squared error based on house_unit_multi_level
rmse_cond_mean <- rmse(pd$pred_homeown_rate,pd$mean_homeown_rate)
## Clear environment
rm(list=ls())
## Get libraries
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(Metrics)
## Load in the county-level data
load("/Users/derekrouch/Documents/GitHub/data-science/pd.Rdata")
## Load the variable descriptions
load("/Users/derekrouch/Documents/GitHub/data-science/pd_lab_explain.Rdata")
## Unconditional average
pd%>%summarize(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
##Unconditional average as a predictor
pd <- pd%>%mutate(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
pd <- pd%>%mutate(error_homeown=homeown_rate-mean_homeown_rate)
## Calculating the root mean squared error
rmse_uncond_mean <- rmse(pd$homeown_rate,pd$mean_homeown_rate)
## Calling the RMSE
rmse_uncond_mean
## Determine each variable's class
sapply(pd, class)
## Create a subset of the data, consisting of only numeric variables
pd_num_only <- subset(pd, select = -c(fips, county))
## Create a correlation matrix, rounded to two decimal places
cor_matrix <- cor(pd_num_only)
round(cor_matrix, 2)
## Remove every column except `homeown_rate` in the matrix
cor_homeown_rate <- subset(cor_matrix, select = c(homeown_rate))
## Create a variable for quartiles of % housing units in multi-unit structures
pd<-pd%>%mutate(house_unit_multi_level=ntile(house_unit_multi,4))
## Check for evenl distribution across levels
table(pd$house_unit_multi_level)
## View house_unit_multi_level for each county
pd%>%select(county,house_unit_multi,house_unit_multi_level)%>%View()
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>%
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(-pred_homeown_rate,ties.method="random"))
## View new pred_homeown_rate by county
pd%>%select(county,house_unit_multi,house_unit_multi_level,pred_homeown_rate, pred_homeown_rate_rank)%>%View()
## Calculating the root mean squared error based on house_unit_multi_level
rmse_cond_mean <- rmse(pd$pred_homeown_rate,pd$mean_homeown_rate)
## Calling the RMSE
rmse_cond_mean
r round(rmse_uncond_mean-rmse_cond_mean,2)
(rmse_uncond_mean-rmse_cond_mean,2)
rmse_uncond_mean-rmse_cond_mean
## Calculating the difference between rmse_uncond and rmse_cond
rmse_difference <- rmse_uncond_mean-rmse_cond_mean
#Calling the RMSE difference
rmse_difference
## Calculating the difference between rmse_uncond and rmse_cond
rmse_difference <- rmse_uncond_mean-rmse_cond_mean
## Calling the RMSE difference
rmse_difference
## Calculating the percentage improvement
rmse_percent_improved <- rmse_difference/rmse_uncond_mean
## Calling the RMSE prcent improvement
rmse_percent_improved
## Calculating the difference between rmse_uncond and rmse_cond
rmse_difference <- rmse_uncond_mean-rmse_cond_mean
## Calling the RMSE difference
rmse_difference
## Calculating the percentage improvement
rmse_percent_improved <- (rmse_difference/rmse_uncond_mean)*100
## Calling the RMSE prcent improvement
rmse_percent_improved
## Calculating the difference between rmse_uncond and rmse_cond
rmse_difference <- rmse_uncond_mean-rmse_cond_mean
## Calling the RMSE difference
rmse_difference
## Calculating the percentage improvement
rmse_percent_improved <- (rmse_difference/rmse_uncond_mean)*100
## Calling the RMSE prcent improvement
round(rmse_percent_improved, 2)
pd <- pd%>%mutate(error_cond=pred_homeown_rate-mean_homeown_rate)
## Calculating the percentage improvement
rmse_percent_improved <- (rmse_difference/rmse_uncond_mean)*100
## Calling the RMSE prcent improvement, rounded to two decimal places
round(rmse_percent_improved, 2)
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>%
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
gg<-ggplot(data=pd,aes(x=pred_homeown_rate_rank,y=homeown_rate,color="Actual"))
gg<-ggplot(data=pd,aes(x=pred_homeown_rate_rank,y=homeown_rate,color="Actual"))
gg<-gg+geom_point(alpha=.5,size=.5)
gg<-gg+geom_point(aes(x=pred_homeown_rate_rank,y=pred_homeown_rate,color="Predicted:Conditional Mean, 1 var"))
gg<-gg+ scale_color_manual("Type",values=c("Predicted:Conditional Mean, 1 var"="red","Actual"="black"))
gg<-gg+theme(legend.position="bottom")
gg<-gg+xlab("Rank")+ylab("Home Ownership Rate, 2008-2012")
gg
## Clear environment
rm(list=ls())
## Get libraries
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(Metrics)
## Load in the county-level data
load("/Users/derekrouch/Documents/GitHub/data-science/pd.Rdata")
## Load the variable descriptions
load("/Users/derekrouch/Documents/GitHub/data-science/pd_lab_explain.Rdata")
## Unconditional average
pd%>%summarize(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
##Unconditional average as a predictor
pd <- pd%>%mutate(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
## Calculating the error term
pd <- pd%>%mutate(error_uncond=homeown_rate-mean_homeown_rate)
## Calculating the root mean squared error
rmse_uncond_mean <- rmse(pd$homeown_rate,pd$mean_homeown_rate)
## Calling the RMSE
rmse_uncond_mean
## Determine each variable's class
sapply(pd, class)
## Create a subset of the data, consisting of only numeric variables
pd_num_only <- subset(pd, select = -c(fips, county))
## Clear environment
rm(list=ls())
## Get libraries
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(Metrics)
## Load in the county-level data
load("/Users/derekrouch/Documents/GitHub/data-science/pd.Rdata")
## Load the variable descriptions
load("/Users/derekrouch/Documents/GitHub/data-science/pd_lab_explain.Rdata")
## Unconditional average
pd%>%summarize(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
##Unconditional average as a predictor
pd <- pd%>%mutate(mean_homeown_rate=mean(homeown_rate,na.rm=TRUE))
## Calculating the error term
pd <- pd%>%mutate(error_uncond=homeown_rate-mean_homeown_rate)
## Calculating the root mean squared error
rmse_uncond_mean <- rmse(pd$homeown_rate,pd$mean_homeown_rate)
## Calling the RMSE
rmse_uncond_mean
## Determine each variable's class
sapply(pd, class)
## Create a subset of the data, consisting of only numeric variables
pd_num_only <- subset(pd, select = -c(fips, county))
## Create a correlation matrix, rounded to two decimal places
cor_matrix <- cor(pd_num_only)
round(cor_matrix, 2)
## Remove every column except `homeown_rate` in the matrix
cor_homeown_rate <- subset(cor_matrix, select = c(homeown_rate))
## Remove every column except `homeown_rate` in the matrix
cor_homeown_rate <- subset(cor_matrix, select = c(homeown_rate))
View(cor_homeown_rate)
## Create a variable for quartiles of % housing units in multi-unit structures
pd<-pd%>%mutate(house_unit_multi_level=ntile(house_unit_multi,4))
## Check for even distribution across levels
table(pd$house_unit_multi_level)
## View house_unit_multi_level for each county
pd%>%select(county,house_unit_multi,house_unit_multi_level)%>%View()
##Group by predictor level
pd<-pd%>%group_by(house_unit_multi_level)%>%
##Calculate mean at each level of predictor
mutate(pred_homeown_rate=mean(homeown_rate))%>%
## Ungroup
ungroup()%>%
#Rank by prediction, with ties sorted randomly
mutate(pred_homeown_rate_rank=rank(-pred_homeown_rate,ties.method="random"))
View(pd)
## View new pred_homeown_rate by county
pd%>%select(county,house_unit_multi,house_unit_multi_level,pred_homeown_rate, pred_homeown_rate_rank)%>%View()
install.packages(c("haven", "knitr", "readxl", "tidyverse"))
install.packages(c("arules", "rjson", "ROAuth", "rtweet", "stopwords", "tm", "tokenizers", "twitteR", "wordcloud"))
install.packages(c("Metrics", "plotly"))
